package br.com.bandtec.projeto.pneu.programas;

import br.com.bandtec.projeto.pneu.clienteJira.ConexaoAPIJira;
import br.com.bandtec.projeto.pneu.modelos.ConexaoBanco;
import br.com.bandtec.projeto.pneu.modelos.Issue;
import br.com.bandtec.projeto.pneu.modelos.Servidor;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;

/**
 *
 * @author jenni
 */
public class TelaEdicaoServidor extends javax.swing.JFrame {

    String nomeAtual = null;
    String estadoAtual = null;
    String enderecoAtual = null;
    
    public void setarValores(String nomeServidor, String estado, String localizacao){
        lbNomeServidor.setText(nomeServidor);
        lbEnderecoServidor.setText(estado+ " - " + localizacao);
        
        tfNomeServidor.setText(nomeServidor);
        nomeAtual = nomeServidor;
        estadoAtual = estado;
        enderecoAtual = localizacao;
    }
    /**
     * Creates new form TelaEdicaoServidor
     */
    public TelaEdicaoServidor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        btVoltar2 = new javax.swing.JButton();
        lbTitulo = new javax.swing.JLabel();
        lbNomeServidor = new javax.swing.JLabel();
        lbEnderecoServidor = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cbEstados = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        cbEnderecos = new javax.swing.JComboBox<>();
        btEditarDadosPessoais = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        tfNomeServidor = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel12.setBackground(new java.awt.Color(35, 35, 35));

        jLabel11.setBackground(new java.awt.Color(151, 109, 208));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(3, 173, 227));
        jLabel11.setText("PNEU");

        btVoltar2.setBackground(new java.awt.Color(3, 173, 227));
        btVoltar2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btVoltar2.setForeground(new java.awt.Color(255, 255, 255));
        btVoltar2.setText("Voltar");
        btVoltar2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btVoltar2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltar2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btVoltar2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btVoltar2)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbTitulo.setBackground(new java.awt.Color(0, 0, 0));
        lbTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Edição de Servidor");
        lbTitulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lbNomeServidor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbNomeServidor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbNomeServidor.setText("Nome Servidor");

        lbEnderecoServidor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbEnderecoServidor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbEnderecoServidor.setText("Localização");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Estados");

        cbEstados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEstadosActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Endereços disponíveis");

        cbEnderecos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEnderecosActionPerformed(evt);
            }
        });

        btEditarDadosPessoais.setBackground(new java.awt.Color(3, 173, 227));
        btEditarDadosPessoais.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btEditarDadosPessoais.setForeground(new java.awt.Color(255, 255, 255));
        btEditarDadosPessoais.setText("Confirmar Editação");
        btEditarDadosPessoais.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btEditarDadosPessoais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditarDadosPessoaisActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Nome");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lbTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                    .addComponent(lbNomeServidor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbEnderecoServidor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17)
                    .addComponent(jLabel12)
                    .addComponent(jLabel16)
                    .addComponent(cbEnderecos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbEstados, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btEditarDadosPessoais, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfNomeServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(lbTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbNomeServidor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEnderecoServidor)
                .addGap(39, 39, 39)
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfNomeServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEnderecos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btEditarDadosPessoais, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btVoltar2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltar2ActionPerformed
        
        TelaConsultaServidor frameConsulta = new TelaConsultaServidor();
        frameConsulta.setVisible(true);
        Connection con = null;
        try {
            Class.forName(ConexaoBanco.DRIVER);
            con = DriverManager.getConnection(ConexaoBanco.URL, ConexaoBanco.USER, ConexaoBanco.PASSWORD);
            Statement stm = con.createStatement();
            String SQLSelectServidor = "select * from Servidor;";
            ResultSet rsServidor = stm.executeQuery(SQLSelectServidor);
            DefaultListModel dlm = new DefaultListModel();   
            while(rsServidor.next()) {
                dlm.addElement(rsServidor.getString("nomeServidor"));
            }
            String SQLSelectEstado = "select * from Localizacao;";
            ResultSet rsEstado = stm.executeQuery(SQLSelectEstado);
            frameConsulta.jcbEstado.addItem("Todos");
            while(rsEstado.next()) {
                frameConsulta.jcbEstado.addItem(rsEstado.getString("estado"));
            }
            frameConsulta.jlListaCadastro.setModel(dlm);  
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(TelaServidor.class.getName()).log(Level.SEVERE, null, ex);
        } finally { 
            try{ 
                con.close(); // Após finalizar processo, fecha a conexão
            }catch(SQLException onConClose){
                System.out.println("Houve erro no fechamento da conexão");
                JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro de conexão",JOptionPane.WARNING_MESSAGE);
                onConClose.printStackTrace();
            }
        }
            
        dispose();
        
    }//GEN-LAST:event_btVoltar2ActionPerformed

    private void btEditarDadosPessoaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditarDadosPessoaisActionPerformed
        
        Integer senha_ok = 0;
        String senha = null;
        while (senha_ok == 0){
            JPasswordField pf = new JPasswordField();
            String msgGerente = "Digite a senha de Gerente";
            Integer okCxl = JOptionPane.showConfirmDialog(null, pf, msgGerente, JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (okCxl == 0) {
                senha = new String(pf.getPassword());
                Connection con = null;
                // Tenta conexão com banco MySQL
                try {
                    Class.forName(ConexaoBanco.DRIVER);
                    con = DriverManager.getConnection(ConexaoBanco.URL, ConexaoBanco.USER, ConexaoBanco.PASSWORD);
                    
                    String senhaGerente = "Adm123";
                    
                        if (senha.equals(senhaGerente)){
                            senha_ok++;
                            
                            String novoNome = tfNomeServidor.getText();
                            String novoEstado = cbEstados.getSelectedItem().toString();
                            String novoEndereco = cbEnderecos.getSelectedItem().toString();

                            String[] separar = novoEndereco.split(", ");
                            String novaCidade = separar[0];
                            String novoBairro = separar[1];         
                            try {

                                Class.forName(ConexaoBanco.DRIVER);
                                con = DriverManager.getConnection(ConexaoBanco.URL, ConexaoBanco.USER, ConexaoBanco.PASSWORD);
                                
                                if (!novoEstado.equals(estadoAtual) || !novoEndereco.equals(enderecoAtual)  || !novoNome.equals(nomeAtual)){
                                    Statement stm = con.createStatement();
                                        String queryLocalizacao = "Select * from Localizacao where estado like '"+novoEstado+"' and cidade like '"+novaCidade+"' and bairro like '"+novoBairro+"';";
                                        ResultSet rs = stm.executeQuery(queryLocalizacao);

                                        while(rs.next()) {
                                            String fkLocalizacao = rs.getString("idLocalizacao");
                                            String query2 = "UPDATE Servidor SET fkLocalizacao = '"+fkLocalizacao+"' WHERE nomeServidor like '"+nomeAtual+"';";
                                            PreparedStatement preparedStmt = con.prepareStatement(query2);
                                            preparedStmt.executeUpdate();
                                        }
                                    

                                    
                                        String query1 = "UPDATE Servidor SET nomeServidor = '"+novoNome+"' WHERE nomeServidor like '"+nomeAtual+"';";
                                        PreparedStatement preparedStmt = con.prepareStatement(query1);
                                        preparedStmt.executeUpdate();
                                        
                                        JOptionPane.showMessageDialog(null, "Servidor editado com sucesso");
                                        
                                        String msg = "O servidor "+nomeAtual+" foi editado para "+novoNome+" e sua localização foi editada para "+novoEstado+" - "+novoEndereco+".";
                                        String titulo = "Edição de servidor executada";
                                        try {
                                            Issue novaIssue = new Issue();
                                            ConexaoAPIJira.criacao(novaIssue, msg, titulo);
                                        } catch (IOException ex) {
                                            Logger.getLogger(TelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                        
                                        TelaConsultaServidor frameConsulta = new TelaConsultaServidor();
                                        frameConsulta.setVisible(true);
                                        try {
                                            Class.forName(ConexaoBanco.DRIVER);
                                            con = DriverManager.getConnection(ConexaoBanco.URL, ConexaoBanco.USER, ConexaoBanco.PASSWORD);
                                            String SQLSelectServidor = "select * from Servidor, Localizacao where fkLocalizacao = idLocalizacao;";
                                            ResultSet rsServidor = stm.executeQuery(SQLSelectServidor);
                                            DefaultListModel dlm = new DefaultListModel();   
                                            while(rsServidor.next()) {
                                                String nomeServidor = rsServidor.getString("nomeServidor");
                                                String estadoServidor = rsServidor.getString("estado");
                                                String cidadeServidor = rsServidor.getString("cidade");
                                                String bairroServidor = rsServidor.getString("bairro");
                                                dlm.addElement(nomeServidor +": "+estadoServidor+" - "+cidadeServidor+", "+bairroServidor);
                                            }
                                            String SQLSelectEstado = "select distinct (estado) from Localizacao;";
                                            ResultSet rsEstado = stm.executeQuery(SQLSelectEstado);
                                            frameConsulta.jcbEstado.addItem("Todos");
                                            while(rsEstado.next()) {
                                                frameConsulta.jcbEstado.addItem(rsEstado.getString("estado"));
                                            }
                                            frameConsulta.jlListaCadastro.setModel(dlm);  
                                            dispose();
                                        } catch (ClassNotFoundException | SQLException ex) {
                                            Logger.getLogger(TelaServidor.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally { 
                                                try{ 
                                                    con.close(); // Após finalizar processo, fecha a conexão
                                                }catch(SQLException onConClose){
                                                    System.out.println("Houve erro no fechamento da conexão");
                                                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro de conexão",JOptionPane.WARNING_MESSAGE);
                                                    onConClose.printStackTrace();
                                                }
                                            }
                                } else {
                                    JOptionPane.showMessageDialog(null,"O servidor não pode ser editado com os valores antigos","Erro ao editar servidor",JOptionPane.ERROR_MESSAGE);
                                }
                                
                                con.close();

                            } catch (ClassNotFoundException | SQLException ex) {
                                Logger.getLogger(TelaConsultaComponente.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    
                    if (senha.equals("")){
                        JOptionPane.showMessageDialog(null, "Senha não preenchida");
                    } else if (senha_ok == 0){
                        JOptionPane.showMessageDialog(null, "Senha incorreta");
                    }
                // Em caso de erro com conexão, gera aviso
                }catch(SQLException e){
                    e.printStackTrace(); //vejamos que erro foi gerado e quem o gerou
                    JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro de Conexão",JOptionPane.WARNING_MESSAGE);
                } catch (ClassNotFoundException ex) { 
                Logger.getLogger(TelaCadastro.class.getName()).log(Level.SEVERE, null, ex);
            }finally { 
                    try{ 
                        con.close(); // Após finalizar processo, fecha a conexão
                    }catch(SQLException onConClose){
                        System.out.println("Houve erro no fechamento da conexão");
                        JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro de conexão",JOptionPane.WARNING_MESSAGE);
                        onConClose.printStackTrace();
                    }
                }
            } else {
                senha_ok++;
            }
        }
    }//GEN-LAST:event_btEditarDadosPessoaisActionPerformed

    private void cbEstadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEstadosActionPerformed

        String selecionado = null;
        selecionado = cbEstados.getSelectedItem().toString();
        cbEnderecos.removeAllItems();
        Connection con = null;
        // Tenta conexão com banco MySQL
                
        try {
            Class.forName(ConexaoBanco.DRIVER);
            con = DriverManager.getConnection(ConexaoBanco.URL, ConexaoBanco.USER, ConexaoBanco.PASSWORD);
            Statement stm = con.createStatement();
            String SQLSelect = "Select * from Localizacao where estado = '"+selecionado+"';";
            ResultSet rs = stm.executeQuery(SQLSelect);
            while(rs.next()) {
                String cidade = rs.getString("cidade");
                String bairro = rs.getString("bairro");
                
                cbEnderecos.addItem(cidade+", "+bairro);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TelaServidor.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(TelaEdicaoServidor.class.getName()).log(Level.SEVERE, null, ex);
        } finally { 
            try{ 
                con.close(); // Após finalizar processo, fecha a conexão
            }catch(SQLException onConClose){
                System.out.println("Houve erro no fechamento da conexão");
                JOptionPane.showMessageDialog(null,"Erro na conexão, com o banco de dados!","Erro de conexão",JOptionPane.WARNING_MESSAGE);
                onConClose.printStackTrace();
            }
        }
    
    }//GEN-LAST:event_cbEstadosActionPerformed

    private void cbEnderecosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEnderecosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbEnderecosActionPerformed

//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(TelaEdicaoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(TelaEdicaoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(TelaEdicaoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(TelaEdicaoServidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TelaEdicaoServidor().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEditarDadosPessoais;
    private javax.swing.JButton btVoltar2;
    private javax.swing.JComboBox<String> cbEnderecos;
    protected javax.swing.JComboBox<String> cbEstados;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lbEnderecoServidor;
    private javax.swing.JLabel lbNomeServidor;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JTextField tfNomeServidor;
    // End of variables declaration//GEN-END:variables
}
